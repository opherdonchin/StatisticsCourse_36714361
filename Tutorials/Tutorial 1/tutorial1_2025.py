# -*- coding: utf-8 -*-
"""Tutorial1_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RV8otLAagu9C4Kj6ELnoHmQI_19GfUms

# **Tutorial 1**

**How To Run Code:**

Run the code: full block - press arrow or ctrl+enter.

Separate lines - highlight and ctrl+shift+enter

To see variables press on {x}. Press on variable name to see its content

**Credit:**

Parts of this tutorial are taken from the Welcome To Colab Notebook: https://colab.research.google.com/#scrollTo=gJr_9dXGpJ05.
Additional parts are taken from: https://colab.research.google.com/github/cs231n/cs231n.github.io/blob/master/python-colab.ipynb

## **Google Colab**
</div>

The document you are reading is not a static web page, but an interactive environment called a **Colab notebook** that lets you write and execute code.

For example, here is a **code cell** with a short Python script that computes a value, stores it in a variable, and prints the result:
"""

#This code cell defines the variable seconds_in_a_day and displays its value.
seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

"""To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut "Command/Ctrl+Enter". To edit the code, just click the cell and start editing.

Variables that you define in one cell can later be used in other cells:
"""

#We can use the seconds_in_a_day variable to compute the number of seconds in a week
seconds_in_a_week = 7 * seconds_in_a_day
seconds_in_a_week

"""## **Simple Arithmetics**"""

x = 3 #define variable x

print(x + 1)   # Addition
print(x - 1)   # Subtraction
print(x * 2)   # Multiplication
print(x ** 2)  # Exponentiation

x += 1
print(x)
x *= 2
print(x)

"""## **Booleans**"""

t, f = True, False
print(type(t))

print(t and f) # Logical AND;
print(t or f)  # Logical OR;
print(not t)   # Logical NOT;
print(t != f)  # Logical XOR;

"""## **Strings**"""

hello = 'hello'   # String literals can use single quotes
world = "world"   # or double quotes; it does not matter
print(hello, len(hello))

#we can concatenate strings using  +
hw = hello + ' ' + world  # String concatenation
print(hw)

#we can also incorporate variables into our string
var = 6

method1 = hello + ' ' + world + ' '  + str(var)
method2 = f'hello world {var}'

print(method1)
print(method2)

"""## **Containers**

### **Lists**

A list is the Python equivalent of an array, but is resizeable and can contain elements of different types:
"""

xs = [3, 1, 2]   # Create a list
print(xs, xs[2])
print(xs[-1])     # Negative indices count from the end of the list; prints "2"

xs[2] = 'foo'    # Lists can contain elements of different types
print(xs)

xs.append('bar') # Add a new element to the end of the list
print(xs)

x = xs.pop()     # Remove and return the last element of the list
print(x, xs)

"""More details about lists are in the [documentation](https://docs.python.org/3.7/tutorial/datastructures.html#more-on-lists).

### Slicing

In addition to accessing list elements one at a time, Python provides concise syntax to access sublists; this is known as slicing:
"""

nums = list(range(5))    # range is a built-in function that creates a list of integers
print(nums)         # Prints "[0, 1, 2, 3, 4]"
print(nums[2:4])    # Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"
print(nums[2:])     # Get a slice from index 2 to the end; prints "[2, 3, 4]"
print(nums[:2])     # Get a slice from the start to index 2 (exclusive); prints "[0, 1]"
print(nums[:])      # Get a slice of the whole list; prints ["0, 1, 2, 3, 4]"
print(nums[:-1])    # Slice indices can be negative; prints ["0, 1, 2, 3]"
nums[2:4] = [8, 9] # Assign a new sublist to a slice
print(nums)         # Prints "[0, 1, 8, 9, 4]"

"""### **Tuples**

A tuple is an (immutable) ordered list of values.

"""

t = (5, 6, 'seven')       # Create a tuple
print(type(t))
print(t[0])

t[0] = 1

"""### **Dictionaries**

A dictionary stores (key, value) pairs.
"""

d = {'cat': 'cute', 'dog': 'furry'}  # Create a new dictionary with some data
print(d)
print(d['cat'])       # Get an entry from a dictionary; prints "cute"
print('cat' in d)     # Check if a dictionary has a given key; prints "True"

d['fish'] = 'wet'    # Set an entry in a dictionary
print(d)
print(d['fish'])      # Prints "wet"

print(d['monkey'])  # KeyError: 'monkey' not a key of d

del d['fish']        # Remove an element from a dictionary

"""You can find all you need to know about dictionaries in the [documentation](https://docs.python.org/2/library/stdtypes.html#dict).

## **Loops**
"""

for i in range(5):
  print(i)

# You can loop over the elements of a list like this:
animals = ['cat', 'dog', 'monkey']
for animal in animals:
    print(animal)

# If you want access to the index of each element within the body of a loop, use the built-in `enumerate` function:
animals = ['cat', 'dog', 'monkey']
for idx, animal in enumerate(animals):
    print(f'#{idx + 1}: {animal}')

# iterate over the keys in a dictionary
d = {'person': 2, 'cat': 4, 'spider': 8}
for animal, legs in d.items():
    print(f'A {animal} has {legs} legs')

"""## **Functions**

Python functions are defined using the `def` keyword.
"""

def sign(x):
    if x > 0:
        return 'positive'
    elif x < 0:
        return 'negative'
    else:
        return 'zero'

for x in [-1, 0, 1]:
    print(sign(x))

#We will often define functions to take optional keyword arguments, like this:
def hello(name, loud=False):
    if loud:
        print(f'HELLO, {name}')
    else:
        print(f'Hello, {name}')

hello('Bob')
hello('Fred', loud=True)

"""## **Libraries**"""

import numpy as np # arrays, array operations
import scipy.stats as stats # statistics
from google.colab import files
import matplotlib.pyplot as plt # plot graphs
import pandas as pd #dataframes
import io
import xarray as xr #multidimensional dataframes

"""### **Numpy**

Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. If you are already familiar with MATLAB, you might find this [tutorial](http://wiki.scipy.org/NumPy_for_Matlab_Users) useful to get started with Numpy.

### Arrays
A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.
"""

a = np.array([1, 2, 3])  # Create a rank 1 array
print(type(a), a.shape, a[0], a[1], a[2])
a[0] = 5                 # Change an element of the array
print(a)

b = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array
print(b)

print(b.shape)
print(b[0, 0], b[0, 1], b[1, 0])

"""Numpy also provides many functions to create arrays:"""

a = np.zeros((2,2))  # Create an array of all zeros
print(a)

b = np.ones((1,2))   # Create an array of all ones
print(b)

c = np.full((2,2), 7) # Create a constant array
print(c)

d = np.eye(2)        # Create a 2x2 identity matrix
print(d)

"""Slicing: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:"""

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]
print(b)

"""### Datatypes
Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:
"""

x = np.array([1, 2])  # Let numpy choose the datatype
y = np.array([1.0, 2.0])  # Let numpy choose the datatype
z = np.array([1, 2], dtype=np.int64)  # Force a particular datatype

print(x.dtype, y.dtype, z.dtype)

"""You can read all about numpy datatypes in the [documentation](http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html).

### Array Math
Basic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module:
"""

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)

# Elementwise sum; both produce the array
print(x + y)
print(np.add(x, y))

# Elementwise difference; both produce the array
print(x - y)
print(np.subtract(x, y))

# Elementwise product; both produce the array
print(x * y)
print(np.multiply(x, y))

# Elementwise division; both produce the array
# [[ 0.2         0.33333333]
#  [ 0.42857143  0.5       ]]
print(x / y)
print(np.divide(x, y))

# Elementwise square root; produces the array
# [[ 1.          1.41421356]
#  [ 1.73205081  2.        ]]
print(np.sqrt(x))

"""Note that unlike MATLAB, `*` is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both as a function in the numpy module and as an instance method of array objects:"""

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

# Matrix / matrix product; both produce the rank 2 array
print(x.dot(y))
print(np.dot(x, y))

# You can also use the `@` operator which is equivalent to numpy's `dot` operator.
print(x @ y)

#Numpy sum
x = np.array([[1,2],[3,4]])

print(np.sum(x))  # Compute sum of all elements; prints "10"
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"

"""You can find the full list of mathematical functions provided by numpy in the [documentation](http://docs.scipy.org/doc/numpy/reference/routines.math.html).

Numpy has many additional functions such as reshape, transpose, concatenate and many many more.

### **Matplotlib**
"""

#plot 2D data
# Compute the x and y coordinates for points on a sine curve
x = np.arange(0, 3 * np.pi, 0.1)
y = np.sin(x)

# Plot the points using matplotlib
plt.plot(x, y)

y_sin = np.sin(x)
y_cos = np.cos(x)

# Plot the points using matplotlib
plt.plot(x, y_sin)
plt.plot(x, y_cos)
plt.xlabel('x axis label')
plt.ylabel('y axis label')
plt.title('Sine and Cosine')
plt.legend(['Sine', 'Cosine'])

#subplots
# Compute the x and y coordinates for points on sine and cosine curves
x = np.arange(0, 3 * np.pi, 0.1)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Set up a subplot grid that has height 2 and width 1,
# and set the first such subplot as active.
plt.subplot(2, 1, 1)

# Make the first plot
plt.plot(x, y_sin)
plt.title('Sine')

# Set the second subplot as active, and make the second plot.
plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title('Cosine')

# Show the figure.
plt.show()

"""### **Pandas**

### Series
A 1D labeled array holding data of any type.
"""

#creating a series
s = pd.Series([1, 3, 5, np.nan, 6, 8])
print(s)

#creating a series from a dictionary
d = {'a': 1, 'b': 2, 'c': 3}
ser = pd.Series(data=d, index=['a', 'b', 'c'])
print(ser)

"""### DataFrame
A 2D data structure that holds data such a table with rows and columns.
"""

#load data
# Height weight example
#upload and read from PC/Drive
# after running press 'Choose File'
from google.colab import files # upload and save files

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['Davis.csv']))

for col in data.columns: # see names of the columns in a loop
    print(col)

print(data)
data

# plot data

height = data.height
num_bins, bin_width = 20, 0.8

height_f = height[data.sex == 'F']
height_m = height[data.sex == 'M']

plt.hist(height_f, bins = 20, rwidth = 0.8, label = 'female', alpha = 0.8)
plt.hist(height_m, bins = 20, rwidth = 0.8, label = 'male', alpha = 0.6)
plt.xlabel('Height [cm]', fontsize = 14)
plt.ylabel('Count', fontsize = 14)

plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(loc='upper right', fontsize=12)
plt.title(f'Female Mean = {round(height_f.mean(), 2)}, Male Mean = {round(height_m.mean(), 2)}', fontsize = 14)

plt.savefig("height_sep.png", bbox_inches='tight')
files.download("height_sep.png")

"""We can get a numpy representation of the data in the dataframe."""

num_data = data[['weight', 'height']].to_numpy()
print(num_data)
print(num_data.shape)

"""### **Xarray**
Enables working with multi-dimensional dataframes.

"""

#load xarray dataset
ds = xr.tutorial.load_dataset("air_temperature")
ds

"""Datasets are dictionary-like containers of “DataArray”s."""

da = ds.air #can also use ds["air"]
da

"""###Dimensions
.dims correspond to the axes of your data.

In this case we have 2 spatial dimensions (latitude and longitude are stored with shorthand names lat and lon) and one temporal dimension (time).
"""

dim = da.dims
dim

"""### Coordinates
.coords is a simple data container for coordinate variables.

Here we see the actual timestamps and spatial positions of our air temperature data:
"""

c = da.coords
c

# extracting coordinate variables
da.lon

"""### Extracting Data
*   Label-based indexing using .sel
*   Position-based indexing using .isel




"""

#label based:
# pull out data for all of 2013-May
May2013 = ds.sel(time="2013-05")
May2013

T2013 = ds.sel(time="2013") #all measurements in 2013
T2013

# demonstrate "nearest" indexing
Lon240 = ds.sel(lon=240.2, method="nearest")
Lon240

# "nearest indexing at multiple points"
ds.sel(lon=[240.125, 234], lat=[40.3, 50.3], method="nearest")

#position based
# pull out time index 0, lat index 2, and lon index 3
ds.air.isel(time=0, lat=2, lon=3)

#we can also plot the data in different ways, for example:
ds.air.isel(time=0).plot(x="lon");