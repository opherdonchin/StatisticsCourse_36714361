# -*- coding: utf-8 -*-
"""Tutorial10_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PsPGKl_PRysfJDAGUiX_CerCZbjuBFTP

# **Tutorial 10**

### Imports
"""

import numpy as np # arrays, array operations
import scipy.stats as stats # statistics
from google.colab import files
import matplotlib.pyplot as plt # plot graphs
import pandas as pd #dataframes
import io
import xarray as xr #multidimensional dataframes
import pymc as pm
import arviz as az

!pip install bambi
import bambi as bmb

"""### Bambi Introduction"""

#make up some data

SIZE = 117
data = pd.DataFrame(
    {
        "y": np.random.normal(size=SIZE),
        "x": np.random.normal(size=SIZE),
        "z": np.random.normal(size=SIZE),
        "g": ["Group A", "Group B", "Group C"] * 39,
    }
)
data.head()

"""First bambi model"""

a_model = bmb.Model("y ~ x", data)
a_model

"""With no intercept"""

no_intercept_model = bmb.Model("y ~ 0 + x", data)
no_intercept_model

"""### Bambi Bike Example"""

#get data
bikes = pd.read_csv("https://github.com/aloctavodia/BAP3/raw/refs/heads/main/code/data/bikes.csv")
bikes

"""Writing the model"""

model_t = bmb.Model("rented ~ temperature", bikes, family="negativebinomial")
idata_t = model_t.fit(1000, chains = 4)
model_t

"""Posterior"""

#mean
bmb.interpret.plot_predictions(model_t, idata_t, "temperature")
plt.plot(bikes.temperature, bikes.rented, "C2.", zorder=-3)
plt.title("mean")

plt.savefig("mean_post.png", bbox_inches='tight')
files.download("mean_post.png")

#posterior predictive
bmb.interpret.plot_predictions(model_t, idata_t, "temperature", pps=True)
plt.plot(bikes.temperature, bikes.rented, "C2.", zorder=-3)
plt.title("Predictions")

plt.savefig("pred_post.png", bbox_inches='tight')
files.download("pred_post.png")

"""Multiple regression"""

model_th = bmb.Model("rented ~ temperature + humidity", bikes, family="negativebinomial")
idata_th = model_th.fit(1000, chains = 4)
model_th

#posterior
bmb.interpret.plot_predictions(model_th, idata_th,
                               conditional={"temperature": bikes["temperature"],
                                            "humidity": [0.18, 0.5, 0.635, 0.76, 1.0]},
                               subplot_kwargs={"group":None, "panel":"humidity"},
                               legend=False,
                               fig_kwargs={"sharey":True, "sharex":True});

plt.subplots_adjust(hspace=0.6)  # Increase spacing between subplots
plt.savefig("multi_post.png", bbox_inches='tight')
files.download("multi_post.png")

"""### Polynomial Regression"""

model_poly_1 = bmb.Model("rented ~ hour", bikes, family="negativebinomial")
idata_poly_1 = model_poly_1.fit(1000, chains = 4)
model_poly_4 = bmb.Model("rented ~ poly(hour, degree=4)", bikes, family="negativebinomial")
idata_poly_4 = model_poly_4.fit(1000, chains = 4)

model_poly_4b = bmb.Model("rented ~ hour + I(hour**2) + I(hour**3) + I(hour**4)", bikes, family="negativebinomial")
idata_poly_4b = model_poly_4b.fit(1000, chains = 4, init="adapt_diag", target_accept=0.9)

#first degree
_, axes = plt.subplots(1, 2, sharey=True, sharex="col", figsize=(12, 3))
bmb.interpret.plot_predictions(model_poly_1, idata_poly_1, "hour", ax=axes[0])
bmb.interpret.plot_predictions(model_poly_1, idata_poly_1, "hour", pps=True, ax=axes[1])

for ax in axes.ravel():
    ax.plot(bikes.hour, bikes.rented, "C2.", zorder=-3)
axes[0].set_title("mean")
axes[1].set_title("predictions")
axes[0].set_xlabel("")
axes[1].set_xlabel("")

plt.savefig("p1.png", bbox_inches='tight')
files.download("p1.png")

#fourth degree orthogonal
_, axes = plt.subplots(1, 2, sharey=True, sharex="col", figsize=(12, 3))
bmb.interpret.plot_predictions(model_poly_4, idata_poly_4, "hour", ax=axes[0])
bmb.interpret.plot_predictions(model_poly_4, idata_poly_4, "hour", pps=True, ax=axes[1])

for ax in axes.ravel():
    ax.plot(bikes.hour, bikes.rented, "C2.", zorder=-3)
axes[0].set_title("mean")
axes[1].set_title("predictions")
axes[0].set_xlabel("")
axes[1].set_xlabel("")

plt.savefig("p4.png", bbox_inches='tight')
files.download("p4.png")

#fourth degree standard
_, axes = plt.subplots(1, 2, sharey=True, sharex="col", figsize=(12, 3))
bmb.interpret.plot_predictions(model_poly_4b, idata_poly_4b, "hour", ax=axes[0])
bmb.interpret.plot_predictions(model_poly_4b, idata_poly_4b, "hour", pps=True, ax=axes[1])

for ax in axes.ravel():
    ax.plot(bikes.hour, bikes.rented, "C2.", zorder=-3)
axes[0].set_title("mean")
axes[1].set_title("predictions")
axes[0].set_xlabel("")
axes[1].set_xlabel("")

plt.savefig("p4b.png", bbox_inches='tight')
files.download("p4b.png")

"""### Spline"""

num_knots = 6
knots = np.linspace(0, 23, num_knots+2)[1:-1]
model_spline = bmb.Model("rented ~ bs(hour, degree=3, knots=knots)", bikes, family="negativebinomial")
idata_spline = model_spline.fit(1000, chains = 4)

#plotting result
_, ax = plt.subplots(sharey=True, sharex="col", figsize=(12, 4))
bmb.interpret.plot_predictions(model_spline, idata_spline, "hour", ax=ax)
ax.plot(bikes.hour, bikes.rented, "C2.", zorder=-3)

plt.savefig("spline.png", bbox_inches='tight')
files.download("spline.png")