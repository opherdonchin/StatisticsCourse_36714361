# -*- coding: utf-8 -*-
"""Tutorial11_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cFvjBLcYeECsop21iP8K0QVbE-KxGfUK

# **Tutorial 11**

### Imports
"""

import numpy as np # arrays, array operations
import scipy.stats as stats # statistics
from google.colab import files
import matplotlib.pyplot as plt # plot graphs
import pandas as pd #dataframes
import io
import xarray as xr #multidimensional dataframes
import pymc as pm
import arviz as az
import seaborn as sns
import scipy.interpolate as interpolate


!pip install bambi
import bambi as bmb

"""### Load Data"""

data = pd.read_csv('https://raw.githubusercontent.com/opherdonchin/StatisticalComputationAndAnalysis/refs/heads/main/Data/insurance.csv')
data

"""### Males and Females"""

female = data.charges[data.sex == 'female']
male = data.charges[data.sex == 'male']

"""Plotting Data"""

plt.hist(female, color = 'red', alpha = 0.5, label = 'female')
plt.hist(male, color = 'blue', alpha = 0.5, label = 'male')
plt.legend(loc = 'upper right', fontsize = 12)
plt.xlabel('Charges', fontsize = 12)
plt.ylabel('Counts', fontsize = 12)

plt.savefig("gender.png", bbox_inches='tight')
files.download("gender.png")

"""Model"""

model_g = bmb.Model("charges ~ sex", data)
idata_g = model_g.fit(1000, chains = 4, idata_kwargs={"log_likelihood":True})

"""Forest plot"""

ax = az.plot_forest(idata_g, combined=True, figsize=(12, 3))
mean_male = idata_g.posterior["sex"].mean()
ax[0].annotate(f"{mean_male.item():.2f}", (mean_male - 500 , 1.5), weight='bold')

plt.savefig("f.png", bbox_inches='tight')
files.download("f.png")

"""### Smoker"""

smoker = data.charges[data.smoker == 'yes']
not_smoker = data.charges[data.smoker == 'no']

"""Plotting data"""

plt.hist(smoker, color = 'red', alpha = 0.5, label = 'smoker')
plt.hist(not_smoker, color = 'blue', alpha = 0.5, label = 'not_smoker')
plt.legend(loc = 'upper right', fontsize = 12)
plt.xlabel('Charges', fontsize = 12)
plt.ylabel('Counts', fontsize = 12)

plt.savefig("smoker.png", bbox_inches='tight')
files.download("smoker.png")

"""Model"""

model_s = bmb.Model("charges ~ smoker", data)
idata_s = model_s.fit(1000, chains = 4, idata_kwargs={"log_likelihood":True})

"""Forest Plot"""

ax = az.plot_forest(idata_s, combined=True, figsize=(12, 3))
mean_smoker = idata_s.posterior["smoker"].mean()
ax[0].annotate(f"{mean_smoker.item():.2f}", (mean_smoker -800, 0.3), weight='bold')

plt.savefig("f2.png", bbox_inches='tight')
files.download("f2.png")

"""### BMI

Plotting Data
"""

plt.scatter(data.bmi, data.charges)

plt.xlabel('BMI', fontsize = 12)
plt.ylabel('Charges', fontsize = 12)

plt.savefig("bmi.png", bbox_inches='tight')
files.download("bmi.png")

"""Model"""

model_b = bmb.Model("charges ~ bmi", data)
idata_b = model_b.fit(1000, chains = 4, idata_kwargs={"log_likelihood":True})

bmb.interpret.plot_predictions(model_b, idata_b, "bmi")
plt.plot(data.bmi, data.charges, "C2.")
plt.title("mean")

plt.savefig("mean_post.png", bbox_inches='tight')
files.download("mean_post.png")

"""### Comparing the three simple models"""

az.compare({"gender": idata_g, "smoker": idata_s, "bmi": idata_b})

az.compare({"gender": idata_g, "smoker": idata_s, "bmi": idata_b}, ic = 'waic')

"""### Multiple Regression"""

model_sb = bmb.Model("charges ~ smoker + bmi", data)
idata_sb = model_sb.fit(1000, chains = 4, idata_kwargs={"log_likelihood":True})

"""Plotting"""

fig, ax = plt.subplots(figsize=(11, 4))
plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["green", "purple", "red", "blue", ])
ax.plot(data.bmi[data.smoker == 'yes'], data.charges[data.smoker == 'yes'], "C1.", alpha = 0.3, label = 'smoker')
ax.plot(data.bmi[data.smoker == 'no'], data.charges[data.smoker == 'no'], "C0.", alpha = 0.3, label = 'not_smoker')
bmb.interpret.plot_predictions(model_sb, idata_sb, ["bmi", "smoker"], ax = ax)

plt.savefig("sb.png", bbox_inches='tight')
files.download("sb.png")

"""Comparing to the simple models"""

az.compare({"smoker": idata_s, "bmi": idata_b, "multiple": idata_sb})

"""### Interaction"""

model_sbi = bmb.Model("charges ~ smoker + bmi + smoker:bmi", data)
idata_sbi = model_sbi.fit(1000, chains = 4, idata_kwargs={"log_likelihood":True})

"""Plotting"""

fig, ax = plt.subplots(figsize=(11, 4))
plt.rcParams['axes.prop_cycle'] = plt.cycler(color=["green", "purple", "red", "blue", ])
ax.plot(data.bmi[data.smoker == 'yes'], data.charges[data.smoker == 'yes'], "C1.", alpha = 0.3, label = 'smoker')
ax.plot(data.bmi[data.smoker == 'no'], data.charges[data.smoker == 'no'], "C0.", alpha = 0.3, label = 'not_smoker')
bmb.interpret.plot_predictions(model_sbi, idata_sbi, ["bmi", "smoker"], ax = ax)

plt.savefig("sbi.png", bbox_inches='tight')
files.download("sbi.png")

"""Comparing multiple regression models with and without interaction temrs"""

az.compare({"multiple": idata_sb, "interaction": idata_sbi})